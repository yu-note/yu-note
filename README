

                                  狼 行 天 下
                                      自由  协作  创造

1.

Ctrl+shift + t  加标签
Ctrl  PgDn /PgUp   换标签
不能在两个标签下打开同一文件

2.
  视频教学
          http://media.happypeter.org/screencasts.html

  

3.

+## 可视行(visual line)
+
+启动和退出: V ((Esc)shift+v)
             j k 上下选中
             d   剪切
             p(小)   往下粘贴
             P       往上粘贴
             y   复制 
+整体缩进几行代码： shift+v (可视行模式)
                    shift+v用j 或 k

+首先用可视行模式选中这几行,然后 `shift + >`,'shift + <'
 

vim a.c b.c (同时打开两个文件)
+    :ls #see buffers
+    :bn # go to next buffer
+    :bp # go to previous buffer   / （先按Esc ,shift + :）
+    :bd # 关闭 a buffer
+    :set hidden 可以不保存切换 
vim a.c
+    :e b.c # 就切过去了

vim 

+    :set number #显示行
+    :set nonumber #不显示行
                       git

+    mkdir hhh
+    git init
+    ls  # 无
+    ls -a   # . .. .git 
+    touch hello  # hello 在hhh里
+    git add hello
+    git commit -a -m "first versiom"  #第一个版本
+    tig

                       7 20
1.  git pull  # 刷新
2.  cd # 要切回上一目录在切到下面所包含目录
3.  git clone 地址
4.  file # 查看属性。
5.  ：q！ # 强行退出
6.  history # 历史操作
7.  unzip   # 解压
8.  :wq
9.  :wqa
                       ref
                      
+    http://happypeter.github.com/LGCB/
+    http://billie66.github.com/TLCL/book/

                       tar
+    http://www.happypeter.org/posts/10

                      translation
+    http://dict.youdao.com/

                      github

+    http://www.happypeter.org/posts/21
                      tar

+    http://www.happypeter.org/posts/10


  关于压缩和解压，以下几种情况最常见:

1.将名为dir的文件夹压缩为 .tar.gz的包：

   tar zcvf  dir.tar.gz dir

   相应的解压命令：

   tar zxvf dir.tar.gz
2.将名为dir的文件夹压缩为 .tar.bz2的包：

    tar jcvf dir.tar.bz2 dir

    相应的解压命令：

    tar jxvf dir.tar.bz2

    当然以上过程也个以用tar, bunzip2, gunzip, 分别分为多步完成，但是>一般不用，太麻烦，所以也不用记。以上的压缩方式，实际中只需记住一种>就够用了，但是解压方式两种都要死记硬背下来，因为太常用了。



                     获取key
+   cd
+   ssh-keygen
+   一路回车
+   cd .ssh
+   ls    #  id-rsa  id-rsa.pub
+   vim id-rsa.pub


                   c 语言


1.  gcc -Wall **.c  # 严格检查代码     #  Wall中W 是大写！
2.  echo $?   #  运行之后，用此指令，若为0，正确，main 函数要把返回值返回到系统。
3.vim  编译    
(1)	+  gcc a.c  # 以 a.c 为例   
	+  ls
	+  ./a.out
(2)
	+  在vim里编译
	+  :w 
	+  :sh  # vim 命令行里
	+  cc a.c
	+  ./a.out
	+  ctrl D  #  回到vim里，光标位置不变，当代码多时能凸现出优点
	+  :u  # 回到上一次修改，ctrl D 再往回切
(3)     +  gcc -S a.c # 以a.c为例，
        +  ls  # 会出现 a.s
        +  vim a.s #  是汇编程序 
(4)     +  vim a.c 
        +  Ctrl+n   # it is used in INSERT mode
                      it will search current file add all included files
(5)     +  vim .vimrc # 对vim的设置
(6)     +  尽量用空格缩进，不用Tab；两者不能混用，如果混用，会造成格式混乱。

                            怎么写笔记

   上攒文件 (在笔记liuyu-note或liuyu-projects下)
(1)    +  git add a.c
       +  git commit -a -m " ***** "
       +  git push(第一次会有所不同)。
(2)   
       +  先 vim .gitconfig ,在最后一行写[core]
                                               editor = vim
       +  vim a.c (改一下，退出)
       +  git commit -a   #  可增加注释
       +  git push
                             怎么建工程
+    Dashboard
+    New Repository
+    填写第一行就行  Project Name 要与所建的文件名相同
                            怎么删除工程
+    Dashboard ——>***-Projects——>Admin
                            怎么删除工程里的文件
+    git rm a.c  ( 不跟踪)
+    git commit -a      （此步骤不能省）
+    git push


                          vim
+  /home/akaedu/.vim/snippets
+  vim c.snippets
+  举例         # added for dog
          snippet dog        记得type Tabe ,否则出现红字。
                I love dogs

  为了使命令简短(.bashrc)
+   /home/akaedu
+   vim .bashrc
+   举例        在最后一行输入 alias aaa='sudo apt-get install'
+   source .bashrc  #相当于把 .bashrc 里的全运行一遍
  vim 配置文件
+   vim .vimrc
    map <tab> :bn<cr>
    map jj <esc>
    map ,ss :set spell<cr>
    set hidden
	set autoindent  “回车时与上一行对齐”
	set expandtab  ''把 Tab 展开成空格“
	set tabstop=4   ”让Tab 占4个空格“
	set shiftwidth=4 “缩进4个空格，不是8个。”
    set dictionary=/usr/share/dict/words  "在.c文件里只检查注释"
  在vim 文件里怎么查找
+   /***
+   小写n.
                  怎么回到上一版

+   git checkout 版本号    #  就可以回到此版本
+   git checkout master    #  再切回来
+   git checkout 版本号 -b 定义一个新名
+   git branch
+   git checkout 新名      #  就可以回到此版本
+   git checkout -D 名     #  删除
+   现有master 分支，在做一个备份， git checkout -b tmp.

                  怎么把已经git push到网上的垃圾版本在改回去

+   git revert HEAD

+   如果没git push，用git throw就可以了。（可以查看vim .gitconfig）

+   卸载： sudo apt-get purge ***


                       where are you ?

+   which     #  which - locate a command 。只能定位系统上的命令  eg : which git ,which ls .
+   locat     #  locate - find files by name。 只能找到老文件，不能
找到新文件。
                 他在自己的数据库里查找，一段时间才更新    但在系统
                 上查找会比较慢。
+   find      #  find - search for files in a directory hierarchy >查找特定文件夹
                 里面的字符，find ***|grep ***. eg :  fint liuyu-projects|grep m .
+   ps aux |grep ***    #   eg : ps aux|grep firefox.
                             kill 进程号，退出。kill -9 进程号，强行退出。


(1)git clone https://github.com/happypeter/hen.git
   ~/hen/search/curse$ make
   ~/hen/search/curse$ sudo make install
(2) snipMate  在Google 中搜索——》下载——》当前文件下解压。
(3) gource
(4) new ***   # 同时打开两个，横
(5) vnew ***  # 同时打开两个，竖

       数据类型

+   最小的储存单位为位（bit），一个字节均为八位。
+   变量赋值，(1) 直接赋值，int a;
                              a = 5;
               (2)  声明语句中初始化变量，int a = 5;
               (3)  通过scanf()函数为变量赋值。
+   格式输出
    #include(stdio.h)
    int main (void)
    {
        int a = 100;
        printf("%d %o %x",a,a,a);
        printf("%d %#o %#x",a,a,a);
        return 0;
    }
    
    输出
        100 144 64
        100 0144 0x64  
+   整数的溢出

#include <stdio.h>
int main(int argc, const char *argv[])
{
    int i = 2147483647;
    unsigned int j = 4294967295;
    printf("%d %d %d\n",i,i+1,i+2);
    printf("%u %u %u\n",j,j+1,j+2);

    return 0;
}

  输出为
       
      2147483647  -2147483648  -2147483647
      4294967295  0  1

     当达到最大值时，它将溢出到起始点。整数i的起始点为-2147483648，无符号整形变量j的起始点为0.

#include <stdio.h>
int main(int argc, const char *argv[])
{

    unsigned int un = 3000000000;
    short end = 200;
    long big = 65537;
    long long verybig = 12345678908642;
    printf("un = %u add not %d\n",un,un);
    printf("edd = %hd add %d\n",end,end);
    printf("big = %ld add not %hd\n",big,big);
    printf("verybig = %lld add not %ld\n",verybig,verybig);

    return 0;
}

输出

un = 3000000000 add not -1294967296  //说明3000000000和-1294967296在内存中表示方法一样，un值太大，%d输出产生溢出。
edd = 200 add 200  // int类型被认为是计算机处理起来最有效的整数类型，使用%hd格式输出显示较长的整数被截为short类型值时的样子。
big = 65537 add not 1  //65537的二进制32位是00000000000000010000000000000001，%hd只显示后16位，即显示1。
verybig = 12345678908642 add not 1942899938  //%ld只显示了后32位的值。
      
            转义字符的输出

+   （1）使用ASCLL码值，char beep = 7；
+   （2）使用转义序列，char nerf = ‘\n’;
+   （3）使用十六进制表示字符常量。
+   （4）‘，“，\，的输出会照成混乱，可这样输出，\',\",\\.



+   在定义中，char类型使用1个字节的存储空间表示一个字符。
+   float，系统的浮点类型，至少能精确六位。



+   sizeof 返回的是字节。
+   int cost = 12.99；//浮点值转换为整数时，c简单的丢弃小数部分。
    float pi = 3.1415926536; //只能保证前六位是精确的，此式会损失部分精度。

+
    #include <stdio.h>
    #define PRAISE "liu yu"//主体是字符串必须用双引号括上，无论字符串中有没有空格
    int main(int argc, const char *argv[])
    {

          char name[20];
          char *p;
          p = name;
          printf("what is your name?\n");
          scanf("%s",name);//读入字符串时，遇空白字符（空格（blank），制表符（tab），换行符(newline)）停止读入,
     //   scanf("%s",p);   //第二个参数是数组只写数组名，不加地址符&，或指针变量，

          printf("%s\n%s\n",name,PRAISE);
        return 0;
    }

    ##################################################

+   字符和字符串
    字符‘x’和字符串"x"不同，其中一个区别是‘x’属于基本类型（char），而“x”属于派生类型（char数组）。第二个区别是“x”实际上有两个字符（‘x’和空字符'\0'）组成。

+   sizeof运算符，他以字节为单位给出数据的大小，strlen（）函数以字符为单位给出字符串的长度。


+   创建符号常量
    1   #define
    2   const
    3   enum


+   由于printf（）函数使用%符号来标识转换说明，所以打印%符号本身就成了一个小问题，如果单独使用一个%符号，编译器会认为您丢掉了一个转换说明符号，解决办法很简单，就是使用两个%符号。
    printf（“%d%%”，a）；

+   %m.nd   // m代表输出宽度，n代表输出小数点位数，如果m的大小小于十进制数的宽度则原样输出，
+   %m.ns   // m代表输出宽度，n代表输出字符串个数，
    m前加-号左对齐，不加或加+号右对齐。

    ##################################################

    printf()函数

+   printf()的返回值，它返回所打印的字符（包括空格和不可见的换行字符）数目。如果右输出错误，那么printf()会返回一个负数。
+   在向文件中输出，如果一张已满的软盘拒绝写入，则应采取行动。

+   当printf()语句很长，以至于不能在一行被放下，因为空白字符（空格，制表符，换行符）如果不是用来分隔元素，那么c将忽略他们，所以可以在多行放置一个语句。
    printf("my name is %s",
                 a);
+   如果必须通过分割一个字符串，有三种选项可供选折。
    1 使用多个printf()语句，如果第一个字符串没有以\n结束，第二个字符串紧跟第一个字符串输出。
    2 用反斜线符号（\）和回车键的组合来结束第一行，下一行必须从行的最左端开始，如果缩进了该行，比如缩进了5个空格，那么5个空个会成为字符串的一部分。
    3 字符串连接的方法，如果在一个用双引号引起来的字符串后面跟有另一个用双引号引起来的字符串，而且之间用空白字符分隔，那么c将把该组合当成一个字符串处理。
    每个双引号内部应包含所有需要的空格，因为c将忽略两个字符串间的空白字符连续打印两个字符串。

    scanf()函数

+   scanf()怎样读取输入，假定您使用了一个%d说明符来读取一个整数，scanf（）函数开始每次读取一个输入字符，它跳过空白字符（空格，制表符，换行符）直接遇到一个非空白字符，因为要读取一个整数，所以scanf（）期望发现一个数字字符或者一个符号（+或者-）。如果它发现一个数字或一个符号，那么它就保存之并读取下一个字符，如果接下来的字符是一个数字，它保存这个数字，并读下一个字符，直到它遇到一个非数字的字符，如果遇到了一个非数字的字符，它就得出结论，已读到整数的尾部。scanf（）把这个非数字字符放回输入。当程序下一次开始读取输入时，它将从前面被放弃的那个非数字字符开始。如果第一非空白字符不是数字，将会发生什么？比如说，是A而非一个数字，这时scanf（）会停在那里，并把它放回输入。没有把任何值赋给指定的变量，程序下一次读取输入时，它就在A处从新开始，如果程序中只有%d说明符，scanf（）永远不会越过那个A（去读下一个），而且，如果您使用带有多个说明符的scanf（）语句，ANSI C 要求函数在第一个出错的地方停止读取输入。

+   如果使用%s说明符，空白以外的所有字符都可以接受的，所以 scanf（）跳过空白字符直到遇到第一个非空白字符，然后保存再次遇到空白字符之前的所有非空白字符，这就意味着%s使scanf（）读取一个单词，也就是说，一个不包括空白字符的字符串。

+   %c如果使用%c说明符，那么所有的输入字符都是平等的，如果下一个输入字符是一个空格，或者换行符，将会把这个空格或换行符赋给指定的变量，不会跳过空白字符。


+   scanf（）允许把普通字符放在格式字符串中，除了空格字符之外的普通字符，一定要与输入字符串准确匹配。

+   除了%c以外的说明符会自动跳过输入项之前的空格，所以scanf("%d%d",&n,&m)与scanf(" %d%d",&n,&m)的行为是相同的，对于%c来说，则不同，scanf("%c",&ch)读取在输入中遇到的第一个字符，scanf(" %c",&ch)则读取遇到的第一个非空白字符。scanf("%c ",&ch),%c后加空格是不允许的，输入一个字符后，无论你输入多少个空格或回车，它将一直读取空白字符，直到遇到非空白字符为止。虽说第一字符已经存入ch中，但这样的输入是有问题的，最好后面不要加空格。

+   scanf()函数的返回值
    scanf()函数返回成功读入的项目个数，如果它没有读取任何项目（当它期望一个数字而你却键入了一个非数字字符串时就会发生这种情况），scanf（）会返回值0，当它检测到“文件末尾”（edd of file）时，它返回EFO，

#include <stdio.h>
//每次输入num的值，加到sum上，
int main(int argc, const char *argv[])
{

    long num;
    long sum = 0l;
    int status ;
    
    printf("please enter an integer ");
    printf("(q to quit):");

    status = scanf("%ld",&num);
    while(status == 1)  //利用scanf()函数返回值控制循环，
    {
          sum = sum + num ;
          printf("please enter next integer (q to quit): ");
          status = scanf("%ld",&num);
    }
    printf("sum = %ld\n",sum);
    return 0;
}
  
可改写成这样
#include <stdio.h>
int main(int argc, const char *argv[])
{

    long num;
    long sum = 0l;
    printf("please enter an integer ");
    printf("(q to quit):");
    while(1 == scanf("%ld",&num))
    {
          sum = sum + num ;
          printf("please enter next integer (q to quit): ");

    }
    printf("sum = %ld\n",sum);
    return 0;
}

          
  **********************************************************************

+
#include <stdio.h>
//用*代替数字，来指定字段宽度。
int main(void)
{
    unsigned width,precision;
    int number = 256;
    double weight = 242.5;

    printf("what field width?\n");
    scanf("%d",&width);
    printf("The number is : %*d\n",width,number);//*在d前，width在number前。
    printf("Now enter a width add a precision:\n");
    scanf("%d %d",&width,&precision);
    printf("Width = %*.*f\n",width,precision,weight);
    
    return 0;

}
    
   *************************************************************************
#include <stdio.h>
//*用在scanf()函数中，把它放在%和说明符字母之间时，它使函数跳过相应的输入项目>。
int main(int argc, const char *argv[])
{
    int n;

    printf("please enter three integers:\n");
    //跳过两个数，把第三个数赋给n。
    scanf("%*d %*d %d",&n);//注意第三个没有*。
    printf("The last integers was %d\n",n);
    return 0;
}//如果程序需要读取一个文件中某个特定的列（该文件的数据以统一的列排列），那么>该功能将非常有用。


   ************************************************************************
    运算符                     

+   c没有指数运算符，标准c的数学库提供了一个pow（）函数，例如，pow(3.5,2.2)返回3.5的2.2次幂。函数原型double pow (double x,double y).
+   计算机不能用整数去除浮点数，编译器先把整数转换成浮点数，再去运算。
+   当运算符共享一个操作数时，优先级规定了求值顺序。() -> 正号和负号-> *和/ ->+和— —> = .
+   c有一个typedef机制，为一个已有的类型创建一个别名。例如 typedef double real.real 就是double的别名，可以用它定义变量，real a ；
+   / 运算符两侧的数，同号为正异号为负，% 运算符，与第一个操作数相同。
+   i = 1;
    while(i<5)
    {
    
      i++;

    }
    可改写成
    i = 1;
    while(i++ < 5)
    {
    
    
    }


+   当n++是表达式的一部分时，可以认为它表示“先使用n，在使其值加一”，另一方面++n的意思是，“先将n值增加，再使用它”。例如：
                                       int y = 2;
                                       int n = 3;
                                       nextnum = (y + n++)*6;
                                       //nextnum = (2 + 3) * 6.
+   （1）用while循环打印整数和它的平方

    while(num < 11)
    {
        printf("%10d %10d",num,num*num++);
    }
    //结果并不是如我们想向那样，因为在c中，编译器可以选择先计算函数里那个参数的值。这个自由度提高了编译器的效率，但在函数参数里使用了增量运算符会带来麻烦。
+   （2）ans = num/2 = 5 * (1 + num++);
         y = n++ + n++;
    // 这两个语句都是右争议的。
怎么避免这些问题：
    1》如果一个变量出现在同一个函数的多个参数中时，不要将增量或者减量运算符用于它上面。
    2》当一个变量多次出现在同一个表达式里时，不要将增量或者减量运算符用于它上面。

+   int sum = 0；
    while(sum++ < 5)  
    {
         printf("%d",sum);
    
    }
    //括号中的sum++ < 5就是表达式，所以sum的值在使用printf()函数前增加，打印的第一个值为1。


+   类型级别从高到低的顺序是long double , double ,float ,unsigned long ,long long,unsigned long ,long ,unsigned int,int ,一个可能的例外是当long和int具有相同大小时，此时unsigned int 比long的级别更高。

+   (type)指派运算符 ，它将跟在它后面的值转换成由圆括号中的关键字所指定的类型
    int mice;
    mice = 1.6 + 1.7;               //mice = 3;
    mice = (int) 1.6 + (int) 1.7;   //mice = 2;

+   当char和short类型出现在表达式里或者作为函数的参数时，它们都将被提升为整形，当float类型作为一个函数参数时被提升为double类型。


    **************************************************************************
              
      while()循环

+   while（）循环时，循环中必须包含能改变判断表达式的值来使表达式的值最终变为假。否则循环永远不会终止。实际上，也可以使用break 和if语句来终止循环，这将在后续的章节中介绍。
     
+   i = 1；
    while(--i < 5)
      printf("good morning!\n");
    //此循环也可以终止，那要等到i减小到比系统可以处理的最小的负数还小并变成最大的可能的整数的时候了。

+   使用while时，只有位于判断条件之后的单个语句，才是循环的部分。使用while时记得用{ }.


+   while()函数判断表达式使用技巧
    
    while(number < 6)
    {
      printf("your number is too small.\n");

      number++;
    
    }

    
    while(ch != 's')
    {
        scanf("%c",&ch);
    }


    while(scanf("%f",&num) == 1)
    {
        sum = sum + num ;
    }   



+   只要while循环的判断条件的值为非零，它就可以执行循环，这使得判断条件建立在数值的基础上而不是在真/假的基础上，要谨记如果关系为真，它的值就为1；如果为假它的值就为零。

+   如果进行比较的双方中有一个是常量，则可把它放在比较表达式的左边，这样做有助于发现错误。5 == canost。

+   for()
    1 可以使用减量运算符来减小计数器而不是增加它。
      for(i=5;i>0;i--)
      {... ...}
    2 如果需要，可以让计数器依次加2，加10，等等。
      for(i=0;i<60;i+=2)
      {... ...}
    3 可以用字符代替数字来进行计算。
      for(ch='a';ch<='z';ch++)//字符是已整数的形式储存的，实际上也是用整数计算的。
      {... ...}
    4 可以判断迭代次数之外的条件。
      for(num=1;num*num*num<1000;num++)//不知道循环次数的
      {... ...}
    5 可以让数量几何增加，而不是算数增加。
      for(debt=100.0;debt<150.0;debt*=1.1)//每次增加10% 。
      {... ...}
    6 在第三个表达式中，可以使用所需的任何合法表达式，无论使用的是什么，每次循环中都会得到更新。
      for(x=1;y<=75;y=(++x*5)+50)
      {printf("%10d %10d",x,y);}
    7 可以让一个或多个表达式为空，但不能遗漏分号。只需确保循环中包含了一些能使循环最终结束的语句。
      for(n = 3 ; ans <= 25;)
       ans = ans * n;
    8 第一个表达式不必初始化一个变量，它也可以是某种类型的printf()语句，第一个表达式只在执行循环的其他部分之前求值或执行一次。
#include <stdio.h>
int main(void)
{
    int k;

    for(k = 1,printf ("%d:Hi!\n",k);printf("k = %d\n",k),k*k < 26;k+=2,printf("now k is %d\n",k))
    {
       printf("k is %d in the loop\n",k);
    }
    return 0;
}
 
  输出为：
1:Hi!
k = 1
k is 1 in the loop
now k is 3
k = 3
k is 3 in the loop
now k is 5
k = 5
k is 5 in the loop
now k is 7
k = 7
//for循环中第一个表达式只执行一次，再第二个表达式判断是否为真，为真，执行循环体，然后计算第三个表达式，继续第二个表达式进行判断。

+   do while循环至少执行一次，因为在循环体被执行之后才进行判断。
   #include"stdio.h"
   int main(void)
   {
      const int secret_code = 13;
      int code_entered;
      do
      {   
          printf("To enter the triskaidekaphobia therapy club,\n");
          printf(plesae entr the secret code number:\n);
          scanf("%d",&code_entered);
    
      }while(code_entered != secret_code);

      printf("Congratulations!you are cured!\n");
      return 0;

    }


+   scanf("%lf",&a[2]),//正确用法，lf打印浮点型，a[2]是一个值，&a[2]是它内存中的位置。












